// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id              String    @id @default(uuid())
  firstName       String    @map("first_name")
  lastName        String    @map("last_name")
  profileImageURL String?   @map("profile_image_url")
  email           String    @unique
  password        String
  Post            Post[]
  likes           Like[]     // ADD THIS
  comments        Comment[]  // ADD THIS

  @@map("users")
}

model Post {
  id            String    @id @default(uuid())
  content       String
  postImageFile String?   @map("post_image_url")
  createdAt     DateTime  @default(now())  // âœ… Already there
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  likes         Like[]
  comments      Comment[]

  @@map("posts")
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])  // ADD THIS
  Post   Post?  @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // Prevent duplicate likes
  @@map("likes")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())  // ADD THIS LINE
  user      User     @relation(fields: [userId], references: [id])  // ADD THIS
  Post      Post?    @relation(fields: [postId], references: [id])

  @@map("comments")
}

model Follower {
  id          String @id @default(uuid())
  followerId  String
  followingId String
}